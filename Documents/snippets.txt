def time_delta_human_fmt(time_ms: float | datetime.timedelta):
    units = ["years", "months", "days", "hours", "minutes", "seconds"]

    if isinstance(time_ms, datetime.timedelta):
        time_ms = time_ms.total_seconds() * 1000

    delta = relativedelta(microseconds=int(time_ms * 1000))

    formatted = [
        f"{getattr(delta, unit)} {unit if getattr(delta, unit) > 1 else unit[:-1]}"  # months / month
        for unit in units
        if getattr(delta, unit)  # If the unit is defined in the delta
    ]

    rs = (" ".join(formatted)).strip()

    return rs if len(rs) > 0 else f"{time_ms / 1000:.4f} seconds"



def size_fmt(num_bytes: float, suffix="B"):
    for unit in ("", "Ki", "Mi", "Gi", "Ti", "Pi", "Ei", "Zi"):
        if abs(num_bytes) < 1024.0:
            return f"{num_bytes:.1f}{unit}{suffix}"
        num_bytes /= 1024.0
    return f"{num_bytes:.1f}Yi{suffix}"


def large_num_fmt(num: float):
    for mult in ("", "K", "KK", "KKK"):
        if abs(num) < 1000.0:
            return f"{num:.2f}{mult}"
        num /= 1000.0
    return f"{num:.2f}KKKK"


{ # https://stackoverflow.com/questions/58966324/grep-into-variable-and-maintain-stdout
    VERSION_AND_STATUS=$(docker-build "$1" 2>&1 | tee >(grep '==>' | sed -e 's/==>//') >&3)
} 3>&1 # 0^forecast:2.0.2-adadfc



def batcher(iterable: Iterable, batch_size: int):
    iterator = iter(iterable)
    while batch := list(islice(iterator, batch_size)):
        yield batch


times, times_with_contexts = zip(*reversed(sorted(zip(times, times_with_contexts))))
times = list(times)
times_with_contexts = list(times_with_contexts)








# https://www.scivision.dev/platform-independent-ulimit-number-of-open-files-increase/
def raise_nofile(nofile_atleast=4096):
    """
    sets nofile soft limit to at least 4096 (default is 1024)
    """
    if res is None:
        return

    # (0) what is current ulimit -n setting?
    soft, ohard = res.getrlimit(res.RLIMIT_NOFILE)
    hard = ohard
    # (1) increase limit (soft and even hard) if needed
    if soft < nofile_atleast:
        soft = nofile_atleast

        hard = max(hard, soft)

        logger.info(f"Setting soft & hard ulimit -n {soft} {hard}")
        try:
            res.setrlimit(res.RLIMIT_NOFILE, (soft, hard))
        except (ValueError, res.error):
            try:
                hard = soft
                logger.error(f"Trouble with max limit, retrying with soft,hard {soft},{hard}")
                res.setrlimit(res.RLIMIT_NOFILE, (soft, hard))
            except Exception:  # pylint: disable=W0718
                logger.error("Failed to set ulimit, giving up")




def ex_to_str(ex: Exception):
    exceptions: list[BaseException] = []
    current_ex: BaseException | None = ex
    while current_ex is not None:
        exceptions.append(current_ex)
        current_ex = current_ex.__cause__ or current_ex.__context__

    return " <-- ".join([f"{classname(e)}: {e}" for e in exceptions])
