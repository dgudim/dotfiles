# https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/performance_tuning_guide/s-network-dont-adjust-defaults

# Maximum number of packets, queued on the INPUT side, when the interface
# receives packets faster than kernel can process them. (default: 1000)
net.core.netdev_max_backlog = 16384
# Limit of socket listen() backlog, known in userspace as SOMAXCONN.
# Defaults to 4096. (Was 128 before linux-5.4)
# See also tcp_max_syn_backlog for additional tuning for TCP sockets.
net.core.somaxconn = 8192
# The default and max setting of the socket receive buffer in bytes
#### net.core.rmem_default = 1048576 # 1 Mb (208 Kb by default)
#### net.core.rmem_max = 16777216 # 16 Mb
# The default and max setting of the socket send buffer in bytes
#### net.core.wmem_default = 1048576  # 1 Mb (208 Kb by default)
#### net.core.wmem_max = 16777216  # 16 Mb

# Maximum ancillary buffer size allowed per socket. Ancillary data is a sequence
# of struct cmsghdr structures with appended data.
# idk what this means, increase this bad boy (20480 by default)
net.core.optmem_max = 65536

# min: Minimal size of receive buffer used by TCP sockets.
# It is guaranteed to each TCP socket, even under moderate memory
# pressure.
#
# Default: 4K
#
# default: initial size of receive buffer used by TCP sockets.
# This value overrides net.core.rmem_default used by other protocols.
# Default: 131072 bytes. (128K)
# This value results in initial window of 65535.
#
# max: maximal size of receive buffer allowed for automatically
# selected receiver buffers for TCP socket. This value does not override
# net.core.rmem_max.  Calling setsockopt() with SO_RCVBUF disables
# automatic tuning of that socket's receive buffer size, in which
# case this value is ignored.
# Default: between 131072 and 6MB, depending on RAM size.
# 8K 1M 16M (from net.core.rmem_max)
#### net.ipv4.tcp_rmem = 8192 1048576 16777216

# min: Amount of memory reserved for send buffers for TCP sockets.
# Each TCP socket has rights to use it due to fact of its birth.
#
# Default: 4K
#
# default: initial size of send buffer used by TCP sockets.  This
# value overrides net.core.wmem_default used by other protocols.
#
# It is usually lower than net.core.wmem_default.
#
# Default: 16K
#
# max: Maximal amount of memory allowed for automatically tuned
# send buffers for TCP sockets. This value does not override
# net.core.wmem_max.  Calling setsockopt() with SO_SNDBUF disables
# automatic tuning of that socket's send buffer size, in which case
# this value is ignored.
#
# Default: between 64K and 4MB, depending on RAM size.
# 8K 64K 16M (from net.core.wmem_max)
#### net.ipv4.tcp_wmem = 8192 65536 16777216

# Minimal size of receive and send buffer used by UDP sockets in moderation.
# Each UDP socket is able to use the size for receiving data, even if
# total pages of UDP sockets exceed udp_mem pressure. The unit is byte.
#
# Default: 4K
#### net.ipv4.udp_rmem_min = 8192
#### net.ipv4.udp_wmem_min = 8192

# Enable TCP Fast Open (RFC7413) to send and accept data in the opening
# SYN packet.
#
# The client support is enabled by flag 0x1 (on by default). The client
# then must use sendmsg() or sendto() with the MSG_FASTOPEN flag,
# rather than connect() to send data in SYN.
#
# The server support is enabled by flag 0x2 (off by default). Then
# either enable for all listeners with another flag (0x400) or
# enable individual listeners via TCP_FASTOPEN socket option with
# the option value being the length of the syn-data backlog.
#
# The values (bitmap) are
#
# =====  ======== ======================================================
#   0x1  (client) enables sending data in the opening SYN on the client.
#   0x2  (server) enables the server support, i.e., allowing data in
# a SYN packet to be accepted and passed to the
# application before 3-way handshake finishes.
#   0x4  (client) send data in the opening SYN regardless of cookie
# availability and without a cookie option.
# 0x200  (server) accept data-in-SYN w/o any cookie option present.
# 0x400  (server) enable all listeners to support Fast Open by
# default without explicit TCP_FASTOPEN socket option.
# =====  ======== ======================================================
#
# Default: 0x1
#
# Note that additional client or server features are only
# effective if the basic support (0x1 and 0x2) are enabled respectively.
net.ipv4.tcp_fastopen = 3

# Maximal number of remembered connection requests (SYN_RECV),
# which have not received an acknowledgment from connecting client.
#
# This is a per-listener limit.
#
# The minimal value is 128 for low memory machines, and it will
# increase in proportion to the memory of machine.
#
# If server suffers from overload, try increasing this number.
#
# Remember to also check /proc/sys/net/core/somaxconn
# A SYN_RECV request socket consumes about 304 bytes of memory.
# 4096 by default for me
net.ipv4.tcp_max_syn_backlog = 8192

# Maximal number of timewait sockets held by system simultaneously.
# If this number is exceeded time-wait socket is immediately destroyed
# and warning is printed. This limit exists only to prevent
# simple DoS attacks, you _must_ not lower the limit artificially,
# but rather increase it (probably, after increasing installed memory),
# if network conditions require more than default value.
# 262144 by default
net.ipv4.tcp_max_tw_buckets = 2000000

# Enable reuse of TIME-WAIT sockets for new connections when it is
# safe from protocol viewpoint.
#
# - 0 - disable
# - 1 - global enable
# - 2 - enable for loopback traffic only
#
# It should not be changed without advice/request of technical
# experts.
#
# Default: 2
# This setting should remain either Disabled or Loopback Only when communication with hosts behind a NAT firewall must occur. Otherwise, you might encounter TCP connection issues after applying this configuration parameter.
# The most known issue causes clients behind a NAT to receive the following error when connecting via FTP:
#
# 425 Unable to build data connection: Connection refused
#### net.ipv4.tcp_tw_reuse = 1

# The length of time an orphaned (no longer referenced by any
# application) connection will remain in the FIN_WAIT_2 state
# before it is aborted at the local end.  While a perfectly
# valid "receive only" state for an un-orphaned connection, an
# orphaned connection in FIN_WAIT_2 state could otherwise wait
# forever for the remote to close its end of the connection.
#
# Cf. tcp_max_orphans
#
# Default: 60 seconds
# From https://access.redhat.com/solutions/41776
# If you set too large value to tcp_max_tw_buckets, the system may become out of port, file-descripter and memory. If you set too small value, the system may not communicate another host.
#### net.ipv4.tcp_fin_timeout = 10

# How often TCP sends out keepalive messages when keepalive is enabled.
# Default: 2hours.
#### net.ipv4.tcp_keepalive_time = 60

# How frequently the probes are send out. Multiplied by
# tcp_keepalive_probes it is time to kill not responding connection,
# after probes started. Default value: 75sec i.e. connection
# will be aborted after ~11 minutes of retries.
#### net.ipv4.tcp_keepalive_intvl = 40 # 5.25 Minutes

# How many keepalive probes TCP sends out, until it decides that the
# connection is broken. Default value: 9.
#### net.ipv4.tcp_keepalive_probes = 7

# Enable select acknowledgments (SACKS).
# Default: 1
#### net.ipv4.tcp_sack = 1

# Only valid when the kernel was compiled with CONFIG_SYN_COOKIES
# Send out syncookies when the syn backlog queue of a socket
# overflows. This is to prevent against the common 'SYN flood attack'
# Default: 1
#### net.ipv4.tcp_syncookies = 1

# From RFC 1337.
# TIME-WAIT state removes the hazard of old duplicates for “fast” or “long” connections, in which clock-driven ISN selection is unable to prevent overlap of the old and new sequence spaces. The TIME-WAIT delay allows all old duplicate segments time enough to die in the Internet before the connection is reopened.
# prevent TCP TIME_WAIT assassination.
net.ipv4.tcp_rfc1337 = 1
