################################################ Replace ls with exa ################################################

alias ls='exa --all --icons --color=always --classify=always --group-directories-first --long --git --color-scale=size --extended --header'
alias la='exa --all --icons --color=always --classify=always --group-directories-first'
alias l='exa --classify --icons --color=always --classify=always --group-directories-first'

################################################ Replace cat with bat and man with batman, pager options ################################################

# eval "$(batpipe)"
export BATPIPE_ENABLE_COLOR=true
export BATPIPE_INSIDE_LESS=false
tview() {
	batpipe --color=always "$@" | "$PAGER"
}
export MOAR='--no-linenumbers --wrap --no-clear-on-exit --quit-if-one-screen --style=gruvbox'
export PAGER='moar'
alias cat='bat'
alias man='MOAR="--no-linenumbers --wrap" && batman'

alias klogs='sudo journalctl -e -f -k -b | ccze -A -o nolookups | spacer'
alias logs='sudo journalctl -e -f -b | ccze -A -o nolookups | spacer'

################################################ Git and chezmoi aliases ################################################

alias gcomm='git commit-def'
alias gcomm-empty='git commit-empty'
alias gcomm-ren='git commit-rename'
alias gcomm-am='git commit-am'
alias gcomm-amn='git commit-amn'
alias gpul='git pr'
alias gpus='git pu'
alias gpusf='git puf'
gch() {
	BRANCH=$(echo "$1" | cut -d'/' -f2)
	git co "$BRANCH"
}
alias gchr='git co'
alias gchb='git cb'
alias gsync='git sync'
alias gfc="git fetch origin --prune && for branch in \$(git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | awk '\$2 == \"[gone]\" {sub(\"refs/heads/\", \"\", \$1); print \$1}'); do git branch -D \$branch; done && git maintenance run && git fsck"

alias git-vis='gource --colour-images -a 3 -s 1 -c 3'

git-merge-project-into-subfolder() {
	# https://stackoverflow.com/questions/1425892/how-do-you-merge-two-git-repositories
	if [ -z ${1+x} ]; then
		echo "Repo to clone/merge is missing"
		return 1
	fi

	if [ -z ${2+x} ]; then
		echo "Branch name is missing"
		return 1
	fi

	if [ -z ${3+x} ]; then
		echo "Target directory name is missing"
		return 1
	fi

	if ! git status; then
		echo "Current directory is not a git repo"
		return 1
	fi

	orig_dir=$(pwd)
	temp_repo_path=$(mktemp -d)

	git clone "$1" "$temp_repo_path"
	cd "$temp_repo_path" || return 1
	git filter-repo --to-subdirectory-filter "$3"
	cd "$orig_dir" || return 1

	git remote add second-project "$temp_repo_path"
	git fetch second-project --tags
	git merge --allow-unrelated-histories "second-project/$2"
	git remote remove second-project

	/bin/rm -rf "$temp_repo_path"

	echo "DONE!"
}

ensure-worktree() {
	[ -z ${1+x} ] && echo "Please give me a branch" && return 1
	BRANCH=$(echo "$1" | cut -d'/' -f2)
	ROOT=$(git root)
	REPO_NAME=$(basename $ROOT) # (basename -s .git $(git remote get-url origin) ?)
	git fetch
	if git status; then
		git worktree prune
		if git worktree list | grep -q "\[$BRANCH\]"; then
			WORKTREE_DIR=$(git worktree list | grep "$BRANCH" | cut -d' ' -f1)
			echo "Worktree already exists at $WORKTREE_DIR"
			echo "cd $WORKTREE_DIR"
			cd "$WORKTREE_DIR"
			echo 'Updating...'
			gpul
		else
			echo "Trying to create a worktree for branch: $BRANCH"
			cd "$ROOT"
			WORKTREE_DIR="../$REPO_NAME-$BRANCH"
			if git worktree add "$WORKTREE_DIR" $BRANCH; then
				cd "$WORKTREE_DIR"
				git branch --set-upstream-to="origin/$BRANCH" $BRANCH
				echo "Done!"
			else
				cd -
				while [[ ! "$yn" =~ ^[YyNn]$ ]]; do
					read -p "Try to create a new branch?" -n 1 yn
					echo
				done
				if [[ "$yn" =~ ^[Yy]$ ]]; then
					gchb $BRANCH
					ensure-worktree $BRANCH
				else
					echo "Aborting"
				fi
			fi
		fi
	else
		echo "Aborting"
	fi
}

################################################ Adb aliases ################################################

aconn() {
	adb connect kloud-phone:$1
	adb devices
}
logcat() {

	if [ "$1" = "all" ]; then
		adb logcat | logcat-colorize
		return 0
	fi

	if [ "$1" = "raw" ]; then
		adb logcat
		return 0
	fi

	APP="$(adb shell cmd package list packages | cut -d':' -f 2 | fzf)"
	PID="$(adb shell ps | grep $APP | tr -s [:space:] ' ' | cut -d' ' -f2)"

	if [ -z ${PID-} ]; then
		echo "No app specified"
		return 1
	fi

	if [ -z ${PID-} ]; then
		echo "Showing all logs"
		sleep 2
		adb logcat | logcat-colorize
	else
		echo "App PID: $PID"
		sleep 2
		adb logcat | grep -F "$PID" | logcat-colorize
	fi
}
mirror-screen() {
	scrcpy --no-audio
}

mirror-camera() {
	scrcpy --video-source=camera --camera-facing=back --camera-size=1920x1080 --no-audio
}

virtual-camera() {
	sudo modprobe v4l2loopback card_label=Video-Loopback exclusive_caps=1
	scrcpy --video-source=camera --camera-facing=back --camera-size=1920x1080 --no-audio --v4l2-sink=/dev/video0 --no-video-playback --v4l2-buffer=100
}

virtual-screen() {
	sudo modprobe v4l2loopback card_label=Video-Loopback exclusive_caps=1
	scrcpy --no-audio --v4l2-sink=/dev/video0 --no-video-playback --v4l2-buffer=100
}

################################################ Fast cd ################################################

function bu() {
	function usage() {
		cat <<-EOF
			Usage: bu [N]
							N        N is the number of level to move back up to, this argument must be a positive integer.
							h help   displays this basic help menu.
		EOF
	}
	# reset variables
	STRARGMNT=""
	FUNCTIONARG=$1
	# Make sure the provided argument is a positive integer:
	if [[ ! -z "${FUNCTIONARG##*[!0-9]*}" ]]; then
		for i in $(seq 1 $FUNCTIONARG); do
			STRARGMNT+="../"
		done
		CMD="cd ${STRARGMNT}"
		eval $CMD
	else
		usage
	fi
}

alias op='xdg-open'
complete -f op
gop() {
	file="$(gum file --all --file --directory)"
	if [[ -d $file ]]; then
		cd "$file"
	elif [[ -f $file ]]; then
		xdg-open "$file"
	else
		return 0
	fi
}
alias brl='br -sdp'

################################################ Neofetch logo ################################################

alias fastfetch='fastfetch --cpu-temp --logo-width 60 --logo-padding-top 2 --logo /home/kloud/.config/neofetch/logo'

################################################ Pacman aliases ################################################

alias package_sizes='expac -HM "%n %m" -l"\n" -Q $(pacman -Qq) | sort -rhk 2 | column -t -s " " -R 1 | moar'
alias orphans='pacman -Qtdq'
alias broken='sudo pacman -Qkk | grep warning'

################################################ Colorize stuff ################################################

alias csharprepl='csharprepl --useTerminalPaletteTheme'
alias grep='grep --color=auto'
alias ip='ip --color=auto'
ipa() {
	ip a
	ip route
	route -n
}
docker_col() {
	/usr/bin/docker "$@" | docker-color-output
}

################################################ Interactive aliases ################################################

alias mv='mv -i'
alias rm='rm -i'
alias cp='cp -i'
alias ln='ln -i'

################################################ Non-interactive aliases ################################################

alias mv_n='/bin/mv'
alias rm_n='/bin/rm'
alias cp_n='/bin/cp'
alias ln_n='/bin/ln'

################################################ Auto subdir creation ################################################

alias mkdir='mkdir -pv'

################################################ Random stuff ################################################

alias labi_cpp='cd /home/kloud/Documents/shared/_projects/Cpp_stuff/cpp-labs/compiled_binaries_linux/ && ./menu.sh'
alias systeminfo='inxi -v 8'

################################################ Network stuff ################################################

ports() {
	if [ "$1" == "localhost" ]; then
		sudo ss -unplut
		return 0
	fi
	sudo nmap -p- -sV -O "$@"
}
rdns() {
	nmap -R -sn "$@" | grep for | cut -d " " -f 5-
}

#######################################  PYTHON  ##############################################################

__pvenv_activate() {
	source $1/bin/activate
	echo "Done! Consider setting up direnv for automatic activation"
}

pvenv() {
	if [ -d ".venv" ]; then
		echo "Found .venv, activating..."
		__pvenv_activate ".venv"
		return 0
	fi

	if [ -d "venv" ]; then
		echo "Found venv, activating..."
		__pvenv_activate "venv"
		return 0
	fi

	echo "No venv found, creating one"
	uv venv "$@"
	__pvenv_activate ".venv"
}

###############################################################################################################

btrfs_chroot() {
	if [ -z ${1+x} ]; then
		echo "Please provide a root partition";
		return 1;
	fi

	if [ -z ${2+x} ]; then
		echo "Please provide a efi partition";
		return 1;
	fi

	root_part="$1"
	efi_part="$2"

	sudo mkdir -p /mnt/chroot

	sudo mount "$root_part" /mnt/chroot -o subvol=@
	sudo mount "$root_part" /mnt/chroot/var/log -o subvol=@log
	sudo mount "$root_part" /mnt/chroot/var/cache -o subvol=@cache
	sudo mount "$root_part" /mnt/chroot/home -o subvol=@home
	sudo mount "$efi_part"  /mnt/chroot/boot/efi
	sudo mount "$efi_part"  /mnt/chroot/efi

	sudo arch-chroot /mnt/chroot
}

wine_wayland() {
	DISPLAY= wine "$@"
}

nvidia_run() {
	export LIBVA_DRIVER_NAME=nvidia
	"$@"
}

intel_run() {
	export VDPAU_DRIVER=va_gl
	"$@"
}

run_2gb() {
	systemd-run --scope -p MemoryMax=2048M -p MemoryHigh=2048M "$@"
}

run_4gb() {
	systemd-run --scope -p MemoryMax=4096M -p MemoryHigh=4096M "$@"
}

clear-caches() {
	read -p "Delete dotnet caches? [y/N] " -r
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		dotnet nuget locals --clear all
	fi
	read -p "Delete pip caches? [y/N] " -r
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		pip cache purge
		uv cache prune
	fi
	read -p "Delete yay caches? [y/N] " -r
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		yay -Scc
	fi
	read -p "Delete cargo caches? [y/N] " -r
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		cargo cache trim --limit 0B
	fi
	read -p "Delete docker caches? [y/N] " -r
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		docker system prune
	fi
	read -p "Delete systemd caches? [y/N] " -r
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		sudo systemd-tmpfiles --clean
	fi
}

dd-c-progress() {
	sudo progress -w
}

dd-watch() {
	watch -n5 'sudo kill -USR1 $(pgrep ^dd$)'
}

alias lspci='lspci -k'
alias i='kinfo'

alias docker-clear-dagling='docker rmi $(docker images --filter "dangling=true" -q --no-trunc)'
docker-view-parent() {
	docker inspect --format='{{"{{"}}.Id{{"}}"}} {{"{{"}}.Parent{{"}}"}} {{"{{"}}.Config.Entrypoint{{"}}"}} {{"{{"}}.Config.Image{{"}}"}}' $(docker images --filter since="$1" -q)
}
docker-ns-ip() {
	nsenter -U --preserve-credentials -n -t $(pgrep dockerd) -- ip --color=auto a
}

alias weather='curl wttr.in'

alias filestat='duf && dust'

alias pls='sudo "$BASH" -c "$(history -p !!)"'

alias qr='qrencode -t ansiutf8'

alias reboot='sudo reboot now'
alias shut='sudo shutdown now'
systemctl() {
	if [ "$1" == "poweroff" ]; then
		if [ -z ${EASTER_EGG+x} ]; then
			arr[0]="/usr/share/sounds/misc/turret-goodnight.mp3"
			arr[1]="/usr/share/sounds/misc/we-are-done-here.oga"

			rand=$(($RANDOM % 2))
		else
			# More meme sounds if the EASTER_EGG is set
			arr[0]="/usr/share/sounds/misc/anya-likes-peanuts.mp3"
			arr[1]="/usr/share/sounds/misc/catsquish.mp3"
			arr[2]="/usr/share/sounds/misc/domain_expansion.mp3"
			arr[3]="/usr/share/sounds/misc/felix_bit_subarus_ear_scene_rezeroconverttoaudio.mp3"
			arr[4]="/usr/share/sounds/misc/giornos-theme-but-its-in-windows-errors.mp3"
			arr[5]="/usr/share/sounds/misc/huh-cat-meme.mp3"
			arr[6]="/usr/share/sounds/misc/matt-rose-skull-emoji.mp3"
			arr[7]="/usr/share/sounds/misc/oh-my-gah.mp3"
			arr[8]="/usr/share/sounds/misc/portal2.mp3"
			arr[9]="/usr/share/sounds/misc/rick-rolled.mp3"
			arr[10]="/usr/share/sounds/misc/turret-goodnight.mp3"
			arr[11]="/usr/share/sounds/misc/turret-thank-you.mp3"
			arr[12]="/usr/share/sounds/misc/tuturu_1.mp3"
			arr[13]="/usr/share/sounds/misc/we-are-done-here.oga"

			rand=$(($RANDOM % 14))
		fi

		mpv --no-terminal "${arr[$rand]}" >/dev/null && /usr/bin/systemctl "$@" # It is here like this for the ability to cancel the shutdown
	else
		/usr/bin/systemctl "$@"
	fi
}

alias browser-hist='sqlite3 ~/.mozilla/firefox/*.default-release/places.sqlite "SELECT url FROM moz_places order by last_visit_date"'

alias reload='source ~/.bashrc'

butter_debutter() {
	duperemove -r -d -h -v --hashfile=/home/kloud/Documents/butter_hashfile "$@"
}

__rank_mirrors() {
	TMPFILE=$(mktemp)
	sudo true
	rate-mirrors --save=$TMPFILE $1
	echo "Ranked $1 mirrors"
	sudo mv /etc/pacman.d/$2 /etc/pacman.d/$2-backup
	sudo mv $TMPFILE /etc/pacman.d/$2
	echo "Moved to /etc/pacman.d/$2"
	sudo chmod 755 /etc/pacman.d/$2
}

alias mirrors='__rank_mirrors arch mirrorlist && __rank_mirrors chaotic-aur chaotic-mirrorlist'

chzu() {

	yay

	chezmoi git pull
	chezmoi init

	diff_len=$(chezmoi diff | wc | tr -d ' ')
	if [ "$diff_len" = "000" ]; then
		chezmoi apply
	else
		chezmoi diff
		yn=l
		while [[ ! "$yn" =~ ^[YyNn]$ ]]; do
			read -p "Apply?" -n 1 yn
			echo
		done
		[[ "$yn" =~ ^[Yy]$ ]] && chezmoi apply
	fi

	yay -Ycss
	sudo checkservices -i sddm.service
	yay -Ps

	atuin stats

	echo $(pacman-ps | wc -l) entries require restarting

	{{ if eq .chezmoi.hostname "sauron" }}
	gopreload-batch-refresh.sh
	{{ end }}

	echo 'dkms vibe check...'

	dkms status | grep -i 'warning\|error'
}

figleta() {
	fonts=($(find /usr/share/figlet/fonts/ -name "*.flf" | cut -d"/" -f6 | cut -d"." -f1))
	for font in "${fonts[@]}"; do
		echo "--------------------------------------------"
		echo "$font"
		echo ""
		figlet -f $font $@
	done
}

record-terminal() {
	asciinema rec rec.cast
	agg rec.cast --font-family 'FiraCode Nerd Font' --theme asciinema rec.gif
}

mount_shares() {
	echo -n "password for kloud: "
	read -s password
	echo

	FOLDERS=$(smbclient -L $1 -U=kloud%$password | grep Disk | grep -v [$] | cut -d" " -f1)

	for folder in $FOLDERS; do
		mkdir /home/kloud/Documents/MOUNT_$1/$folder
		echo $password | sudo -S mount -t cifs -o uid=kloud,username=kloud,password=$password //$1/$folder /home/kloud/Documents/MOUNT_$1/$folder
		printf "mounted $folder\n"
	done
}

unmount_shares() {
	sudo umount ~/Documents/MOUNT_$1/*
	printf "unmounted all shares\n"
}

b_kill() {
	echo -n "password for kloud: "
	read -s password
	echo

	for run in {1..30}; do
		echo $password | sudo -S l2ping -i hci1 -s 668 -f $1 &
	done
}

get_power() {
	echo - | awk "{printf \"%.1f\", \
$((\
	$(cat /sys/class/power_supply/BAT*/current_now) * \
	$(cat /sys/class/power_supply/BAT*/voltage_now))) / 1000000000000 }"
	echo " W "
}

download_yt_playlist() {
	yt-dlp -x -f ba --embed-thumbnail --add-metadata --output '%(uploader)s - %(title)s.%(ext)s' $1
}

# start_vpn_client(){
#     echo -n "password for kloud: "
#     read -s password
#     echo
#
#     echo $password | sudo -S vpnclient start
#     sleep 5
#     echo $password | sudo -S dhclient vpn_vpn
#     echo $password | sudo -S ip route del default via 172.16.22.1
#     route -n | grep vpn_vpn
#     ip address show vpn_vpn | grep inet
# }

remove-lines() (
	remove_lines="$1"
	all_lines="$2"
	tmp_file="$(mktemp)"
	grep -Fvxf "$remove_lines" "$all_lines" >"$tmp_file"
	mv "$tmp_file" "$all_lines"
)

rgd() {
	rg --json -C 2 $1 | delta
}


############ Remote connections

gen_ssh_prompt() {

	local full_hostname="$(hostname --all-fqdns 2> /dev/null | cut -d ' ' -f1 || hostname --long)"
	local ip="$(hostname --all-ip-addresses 2> /dev/null | cut -d ' ' -f1 || hostname --ip-addresses)"
	local full_hostname="${full_hostname:-$HOSTNAME}"

	combined_hostname="$full_hostname ($ip)"
	hash=$(md5sum <<<"$combined_hostname")

	to_decimal() {
		xargs -i printf "%d\n" "0x{}"
	}

	to_color() {
		to_decimal | awk '{print int($0/255.0*(37-30)+30)}'
	}

	to_32() {
		to_decimal | awk '{print int($0/255.0*31)}'
	}

	generate_block() {

		local span="$1"

		id_symbols="▀▐■▁▂▃▄▅▆▇█▉▊▋▌▍▎▏▔▟▞▝▜▛▚▙▘▗▖▕▬◼"

		select_at_pos() {
			local pos="$1"
			echo "${id_symbols:$((pos % ${#id_symbols})):1}"
		}

		local block_num=$(
			echo "$hash" | cut -c$span | to_32
		)

		local block_color=$(
			echo "$hash" | cut -c$span | to_color
		)

		local block_shape="$(select_at_pos $block_num)"

		echo "\\[\\e[$block_color;1m\\]$block_shape"
	}

	local number=$(
		echo "$hash" | cut -c-2 | to_color
	)
	local number2=$(
		echo "$hash" | cut -c4-5 | to_color
	)

	local block1="$(
		generate_block '5-6'
	)"
	local block2="$(
		generate_block '7-8'
	)"
	local block3="$(
		generate_block '9-10'
	)"
	local block4="$(
		generate_block '11-12'
	)"

	printf '%s%s%s%s \\[\\e[%d;1m\\]◀%s\[\\e[;1m\\]@\\[\\e[%d;1m\\]%s\\[\\e[m\\] (%s)' "$block1" "$block2" "$block3" "$block4" "$number" "\$(whoami)" "$number2" "$full_hostname" "$ip"
}

set_ssh_prompt() {
	export PS1="$(gen_ssh_prompt) \$(pwd) "'$([[ $(whoami) = root ]] && echo -e "\[\e[31;1m\]#\[\e[m\] " || echo "$ ")'
}

__download_helper() {
	local download_url
	local target_path

	download_url="$1"
	target_path="$2"

	if command -v wget 2>&1 >/dev/null
	then
		echo "Using wget, downloading $download_url to $target_path"
		wget --no-verbose "$download_url" -O "$target_path"
		return 0
	fi

	if command -v curl 2>&1 >/dev/null
	then
		echo "Using curl, downloading $download_url to $target_path"
		curl -s --output "$target_path" "$download_url"
		return 0
	fi

	echo "No downloader found!"
	exit 1
}

__get_temp_dir() {
	if [[ "$PREFIX" != *"com.termux"* ]]; then
		if mount | grep /tmp | grep -q noexec; then
			PREFIX="$HOME/.user-config-transient"
		fi
	fi
	dir="$PREFIX/tmp"
	mkdir -p "$dir" 2>/dev/null > /dev/null
	echo "$dir"
}

proxy_on() {
	export http_proxy=http://127.0.0.1:3129
	export https_proxy=http://127.0.0.1:3129
}

proxy_off() {
	unset http_proxy
	unset https_proxy
}

setup_ssh_shell_utils() {
	proxy_on

	L_GREEN='\033[1;32m'
	L_PURPLE='\033[1;35m'
	L_CYAN='\033[1;36m'
	L_YELLOW='\033[0;33m'
	GRAY='\033[1;30m'
	NC='\033[0m'

	echo -e "${L_YELLOW}Setting up environment...${NC}"

	local tmpdir="$(__get_temp_dir)"
	local init_file="$tmpdir/.atuinit"

	if [ -f "$init_file" ]; then
		echo -e "${L_CYAN}Using cached atuin init file${NC}"
		return 0
	fi

	local atuin_target_path="$tmpdir/atuin.tar.gz"
	local extracted_path="$tmpdir/atuin-x86_64-unknown-linux-gnu/"

	if [[ "$(uname -a)" == *"aarch64"* ]]; then
		local atuin_download_url="https://github.com/atuinsh/atuin/releases/latest/download/atuin-aarch64-unknown-linux-gnu.tar.gz"
	else
		local atuin_download_url="https://github.com/atuinsh/atuin/releases/latest/download/atuin-x86_64-unknown-linux-gnu.tar.gz"
	fi

	local preexec_download_path="$tmpdir/.bash-preexec.sh"

	echo -e "${L_PURPLE}Downloading preexec${NC}"

	if [ ! -f "$preexec_download_path" ]; then
		__download_helper "https://raw.githubusercontent.com/rcaloras/bash-preexec/master/bash-preexec.sh" "$preexec_download_path"
	fi

	echo '' >"$init_file"

	echo -e "${L_PURPLE}Downloading atuin...${NC}"

	if [ -f /usr/bin/atuin ]; then
		echo "Atuin installed in default location, skipping installation"
	else
		if [ -d "$extracted_path" ]; then
			echo "${L_CYAN}Atuin already downloaded${NC}"
		else
			__download_helper "$atuin_download_url" "$atuin_target_path"

			echo -e "${L_PURPLE}Extracting atuin...${NC}"
			tar -xzvf "$atuin_target_path" -C "$tmpdir"
		fi

		echo -e "${L_PURPLE}Adding atuin to path${NC}"

		echo "export PATH=\"$extracted_path:\$PATH\"" >>"$init_file"
	fi

	echo -e "${L_PURPLE}Writing atuin init file${NC}"

	echo "source '$preexec_download_path'" >>"$init_file"
	echo 'eval "$(atuin init bash --disable-up-arrow)"' >>"$init_file"

	echo -e "${GRAY}Writing atuin config${NC}"

	mkdir -pv ~/.config/atuin
	echo -e "update_check = false\nworkspaces = true\ninline_height=30\n" > ~/.config/atuin/config.toml

	proxy_off
}

launch_shell() {
	export TMOUT=6000 # Increase auto-logout time

	L_GREEN='\033[1;32m'
	L_PURPLE='\033[1;35m'
	L_YELLOW='\033[0;33m'
	L_BLUE='\033[1;34m'
	GRAY='\033[1;30m'
	NC='\033[0m'

	echo -e "${L_YELLOW}Launching customized shell...${NC}"

	local load_rc="$1"

	local tmpdir="$(__get_temp_dir)"

	local shellrc_path="$tmpdir/.shellrc"
	local my_init_file="$tmpdir/.atuinit"

	setup_ssh_shell_utils

	echo -e "${GRAY}Constructing shell rc file ($shellrc_path)${NC}"

	echo '' >"$shellrc_path"

	if [[ "$PREFIX" == *"com.termux"* ]]; then
		echo -e "${L_BLUE}Running under termux${NC}"
		# profile automatically sources user bashrc, don't source
		echo "source $PREFIX/etc/bash.bashrc" >>"$shellrc_path"
	else
		echo "dialog() { :; }" >>"$shellrc_path" # Disable 'template configurator'
		echo "source /etc/profile" >>"$shellrc_path"
		echo "source /etc/bashrc" >>"$shellrc_path"
		echo "unset -f dialog" >>"$shellrc_path"
	fi

	if [ "$load_rc" = "true" ]; then
		echo 'source ~/.bashrc' >>"$shellrc_path"
	fi

	echo "source '$my_init_file'" >>"$shellrc_path"

	# Copy over needed fuctions to login shell rc
	echo "$(typeset -f gen_ssh_prompt); $(typeset -f set_ssh_prompt);" >>"$shellrc_path"

	echo "set_ssh_prompt" >>"$shellrc_path"
	echo "export TMOUT=6000 # Increase auto-logout time" >>"$shellrc_path"
	echo "alias kubectl='https_proxy= kubectl'" >>"$shellrc_path"

	echo -e "${L_GREEN}Welcome!${NC}"

	bash --rcfile "$shellrc_path"
}

get_ssh_init_str() {
	echo "$(typeset -f gen_ssh_prompt); $(typeset -f set_ssh_prompt); $(typeset -f __download_helper); $(typeset -f __get_temp_dir); $(typeset -f proxy_on); $(typeset -f proxy_off); $(typeset -f setup_ssh_shell_utils); $(typeset -f launch_shell); launch_shell $1"
}

ssh() {
	systemctl is-active squid.service || systemctl start squid.service
	/usr/bin/ssh -t -R 3129:localhost:3128 "$@" "$(get_ssh_init_str false)"
}

ssh_rc() {
	systemctl is-active squid.service || systemctl start squid.service
	/usr/bin/ssh -t -R 3129:localhost:3128 "$@" "$(get_ssh_init_str true)"
}

ssh_n() {
	/usr/bin/ssh "$@"
}
